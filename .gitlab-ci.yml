# SPDX-FileCopyrightText: 2023 PeriHub <https://gitlab.com/dlr-perihub/PeriHub>
#
# SPDX-License-Identifier: Apache-2.0

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

stages:
  - test
  - audit
  - build

.install-deps-template: &install-deps
  only:
    refs:
      - main
    changes:
      - backend/**/*
  before_script:
    - apt update && apt install -y make git build-essential libcgal-dev libeigen3-dev -y
    - pip install -r backend/requirements.txt
    - pip install -r backend/requirements-dev.txt
    - pip install --no-cache-dir --upgrade git+https://github.com/JTHesse/crackpy.git
    - cd backend/app

# .test-template: &test
#   <<: *install-deps
#   stage: test
#   script: make test
#   tags:
#     - docker
#   except:
#     - tags
#   artifacts:
#     when: always
#     reports:
#       junit: backend/app/build/tests.xml

# test-linux-py3.11:
#   image: python:3.11-slim
#   <<: *test

check-coverage:
  image: python:3.11-slim
  <<: *install-deps
  script:
    - make check-coverage
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    when: always
    expose_as: "Coverage Report"
    paths:
      - backend/app/build/html
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/app/build/coverage.xml

.install-dev-deps-template: &install-dev-deps
  only:
    refs:
      - main
    changes:
      - backend/**/*
  before_script:
    - apt update && apt install -y make
    - pip install -r backend/requirements-dev.txt
    - cd backend/app

.audit-template: &audit
  <<: *install-dev-deps
  image: python:3.11-slim
  stage: audit
  tags:
    - docker
  except:
    - tags

check-code:
  <<: *audit
  script:
    - make check-code
  artifacts:
    when: on_failure
    expose_as: "Linter Report"
    paths: ["backend/app/build/flake8.txt"]

check-formatting:
  <<: *audit
  script:
    - make check-formatting

build_backend_job:
  stage: build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - backend/**/*
  script:
    - docker build -t perihub/backend backend/.
    - docker push perihub/backend

build_frontend_job:
  stage: build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - frontend/**/*
  script:
    - docker build -t perihub/frontend frontend/.
    - docker push perihub/frontend

# build_paraview_job:
#   stage: build
#   extends: [.build_before_script_template]
#   only:
#     refs:
#       - main
#     changes:
#       - paraview/**/*
#   script:
#     - docker build -t perihub/paraview paraview/.
#     - docker push perihub/paraview

# build_trame_job:
#   stage: build
#   extends: [.build_before_script_template]
#   only:
#     refs:
#       - main
#     changes:
#       - trame/**/*
#   script:
#     - docker build -t perihub/trame trame/.
#     - docker push perihub/trame

.build_before_script_template:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  after_script:
    - docker logout
