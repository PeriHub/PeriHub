variables: &globals
  CI_REGISTRY_PATH: "harbor.fa-services.intra.dlr.de/hess_ja/"

stages:
  # - Static Analysis
  # - Test
  - Build

.install-deps:
  image: "python:3.8"
  allow_failure: true
  only:
    refs:
      - main
  before_script:
    - pip install -r api/requirements.txt
    - pip install flake8 flake8-junit-report
    - pip install pylint pylint-junit
    - pip install pytest pytest-cov

# flake8:
#   stage: Static Analysis
#   extends: .install-deps
#   only:
#     changes:
#       - api/**/*
#   script:
#     - flake8 --output-file=flake8.txt
#     - flake8-junit flake8.txt flake8_junit.xml
#   artifacts:
#     name: junit_report_$CI_COMMIT_REF_NAME
#     when: always
#     paths:
#         - flake8_junit.xml

# pylint:
#   stage: Static Analysis
#   extends:
#     - .install-deps
#   only:
#     changes:
#       - api/**/*
#   script:
#     - pylint --output-format=junit --output-file=pylint.xml api/**/*.py
#   artifacts:
#     paths:
#       - pylint.xml
#     when: always
#     reports:
#       junit: pylint.xml

# check-coverage:
#   stage: Static Analysis
#   extends:
#     - .install-deps
#   only:
#     changes:
#       - api/**/*
#   script:
#     - pytest --cov=. --cov-fail-under=50 --cov-report=term-missing --cov-report=html --cov-report=xml
#   coverage: '/^TOTAL.+?(\d+\%)$/'
#   artifacts:
#     when: always
#     expose_as: "Coverage Report"
#     paths:
#       - api/htmlcov
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: coverage.xml

# unit_test:
#   stage: Test
#   image: "python:3.8"
#   only:
#     refs:
#       - main
#     changes:
#       - api/**/*
#   allow_failure: true
#   before_script:
#     - pip install -r api/requirements.txt
#     - pip install pytest
#     - cd api/app
#   script:
#     - python3 -m pytest -v --junitxml=report.xml
#   artifacts:
#     when: always
#     reports:
#       junit: api/app/report.xml

build_api_job:
  stage: Build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - api/**/*
  script:
    - docker build --build-arg GITLAB_TOKEN=$GITLAB_TOKEN -t ${CI_REGISTRY_PATH}peri_hub_api_image api/.
    - docker push ${CI_REGISTRY_PATH}peri_hub_api_image

# build_gui_job:
#   stage: Build
#   extends: [.build_before_script_template]
#   only:
#     refs:
#       - main
#     changes:
#       - gui/**/*
#   script:
#     - docker build -t ${CI_REGISTRY_PATH}peri_hub_gui_image gui/.
#     - docker push ${CI_REGISTRY_PATH}peri_hub_gui_image

build_gui_job:
  stage: Build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - quasar-gui/**/*
  script:
    - docker build -t ${CI_REGISTRY_PATH}peri_hub_gui_image quasar-gui/.
    - docker push ${CI_REGISTRY_PATH}peri_hub_gui_image

build_smetana_job:
  stage: Build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - smetana/**/*
  script:
    - docker build --build-arg GITLAB_TOKEN=$GITLAB_TOKEN -t ${CI_REGISTRY_PATH}smetana smetana/.
    - docker push ${CI_REGISTRY_PATH}smetana

build_cron_job:
  stage: Build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - cron/**/*
  script:
    - docker build -t ${CI_REGISTRY_PATH}cron_image cron/.
    - docker push ${CI_REGISTRY_PATH}cron_image

build_paraview_job:
  stage: Build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - paraview/**/*
  script:
    - docker build -t ${CI_REGISTRY_PATH}paraview_image paraview/.
    - docker push ${CI_REGISTRY_PATH}paraview_image

build_trame_job:
  stage: Build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - trame/**/*
  script:
    - docker build --build-arg GITLAB_TOKEN=$GITLAB_TOKEN -t ${CI_REGISTRY_PATH}trame_image trame/.
    - docker push ${CI_REGISTRY_PATH}trame_image

.build_before_script_template:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
    - echo "$HARBOR_KEY" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY_PATH
  after_script:
    - docker logout
