# SPDX-FileCopyrightText: 2023 PeriHub <https://github.com/PeriHub>
#
# SPDX-License-Identifier: Apache-2.0

variables: &globals
  CI_REGISTRY_PATH: "harbor.fa-services.intra.dlr.de/hess_ja/"

stages:
  - test
  - audit
  - build

.install-deps-template: &install-deps
  only:
    refs:
      - main
    changes:
      - api/**/*
  allow_failure: true
  before_script:
    - apt update && apt install -y make git
    - pip install -r api/requirements.txt
    - pip install -r api/requirements-dev.txt
    - pip install -i https://test.pypi.org/simple/ exodusreader
    - pip install -i https://test.pypi.org/simple/ gcodereader
    - pip install --no-cache-dir --upgrade git+https://github.com/JTHesse/crackpy.git
    - cd api/app

.test-template: &test
  <<: *install-deps
  stage: test
  script: make test
  tags:
    - docker
  except:
    - tags
  artifacts:
    when: always
    reports:
      junit: api/app/build/tests.xml

test-linux-py3.11:
  image: python:3.11-slim
  <<: *test

check-coverage:
  image: python:3.11-slim
  <<: *install-deps
  script:
    - make check-coverage
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    when: always
    expose_as: "Coverage Report"
    paths:
      - api/app/build/html
    reports:
      coverage_report:
        coverage_format: cobertura
        path: api/app/build/coverage.xml

.install-dev-deps-template: &install-dev-deps
  only:
    refs:
      - main
    changes:
      - api/**/*
  allow_failure: true
  before_script:
    - apt update && apt install -y make
    - pip install -r api/requirements-dev.txt
    - cd api/app


.audit-template: &audit
  <<: *install-dev-deps
  image: python:3.11-slim
  stage: audit
  tags:
    - docker
  except:
    - tags

check-code:
  <<: *audit
  script:
    - make check-code
  artifacts:
    when: on_failure
    expose_as: "Linter Report"
    paths: ["api/app/build/flake8.txt"]

check-formatting:
  <<: *audit
  script:
    - make check-formatting

build_api_job:
  stage: build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - api/**/*
  script:
    - docker build -t ${CI_REGISTRY_PATH}peri_hub_api_image api/.
    - docker push ${CI_REGISTRY_PATH}peri_hub_api_image

build_gui_job:
  stage: build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - gui/**/*
  script:
    - docker build -t ${CI_REGISTRY_PATH}peri_hub_gui_image gui/.
    - docker push ${CI_REGISTRY_PATH}peri_hub_gui_image

build_paraview_job:
  stage: build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - paraview/**/*
  script:
    - docker build -t ${CI_REGISTRY_PATH}paraview_image paraview/.
    - docker push ${CI_REGISTRY_PATH}paraview_image

build_trame_job:
  stage: build
  extends: [.build_before_script_template]
  only:
    refs:
      - main
    changes:
      - trame/**/*
  script:
    - docker build -t ${CI_REGISTRY_PATH}trame_image trame/.
    - docker push ${CI_REGISTRY_PATH}trame_image

.build_before_script_template:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
    - echo "$HARBOR_KEY" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY_PATH
  after_script:
    - docker logout
