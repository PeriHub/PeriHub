// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GenerateModelData, GenerateModelResponse, GenerateMeshData, GenerateMeshResponse, GetModelsResponse, GetValvesData, GetValvesResponse, GetConfigData, GetConfigResponse, GetMaxFeSizeResponse, GetModelData, GetModelResponse, GetPointDataData, GetPointDataResponse, ViewInputFileData, ViewInputFileResponse, UploadFilesData, UploadFilesResponse, WriteInputFileData, WriteInputFileResponse, TranslateModelData, TranslateModelResponse, TranslateGcodeData, TranslateGcodeResponse, RunModelData, RunModelResponse, CancelJobData, CancelJobResponse, GetJobsData, GetJobsResponse, GetStatusData, GetStatusResponse, GetFractureAnalysisData, GetFractureAnalysisResponse, GetEnfAnalysisData, GetEnfAnalysisResponse, GetPlotData, GetPlotResponse, GetResultsData, GetResultsResponse, GetPointDataResultsData, GetPointDataResultsResponse, DeleteModelData, DeleteModelResponse, DeleteModelFromClusterData, DeleteModelFromClusterResponse, DeleteUserDataData, DeleteUserDataResponse, DeleteUserDataFromClusterData, DeleteUserDataFromClusterResponse, GetPublicationsResponse, GetPrognosisEnergyResponse, GetCurrentEnergyResponse } from './types.gen';

/**
 * Generate Model
 * doc
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.modelName
 * @param data.modelFolderName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const generateModel = (data: GenerateModelData): CancelablePromise<GenerateModelResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/generate/model',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Generate Mesh
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.param
 * @param data.modelFolderName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const generateMesh = (data: GenerateMeshData): CancelablePromise<GenerateMeshResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/generate/mesh',
    query: {
        model_name: data.modelName,
        param: data.param,
        model_folder_name: data.modelFolderName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Models
 * doc
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getModels = (): CancelablePromise<GetModelsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/model/getModels'
}); };

/**
 * Get Valves
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.source
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getValves = (data: GetValvesData): CancelablePromise<GetValvesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/model/getValves',
    query: {
        model_name: data.modelName,
        source: data.source
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Config
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getConfig = (data: GetConfigData = {}): CancelablePromise<GetConfigResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/modelgetConfig',
    query: {
        model_name: data.modelName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Max Fe Size
 * doc
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getMaxFeSize = (): CancelablePromise<GetMaxFeSizeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/model/getMaxFeSize'
}); };

/**
 * Get Model
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getModel = (data: GetModelData = {}): CancelablePromise<GetModelResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/model/getModel',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Point Data
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.ownModel
 * @param data.ownMesh
 * @param data.meshFile
 * @param data.twoD
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getPointData = (data: GetPointDataData = {}): CancelablePromise<GetPointDataResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/model/getPointData',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        own_model: data.ownModel,
        own_mesh: data.ownMesh,
        mesh_file: data.meshFile,
        two_d: data.twoD
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * View Input File
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const viewInputFile = (data: ViewInputFileData = {}): CancelablePromise<ViewInputFileResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/model/viewInputFile',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Upload Files
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.formData
 * @param data.modelFolderName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const uploadFiles = (data: UploadFilesData): CancelablePromise<UploadFilesResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/upload/files',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName
    },
    formData: data.formData,
    mediaType: 'multipart/form-data',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Write Input File
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.inputString
 * @param data.modelFolderName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const writeInputFile = (data: WriteInputFileData): CancelablePromise<WriteInputFileResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/upload/inputFile',
    query: {
        model_name: data.modelName,
        input_string: data.inputString,
        model_folder_name: data.modelFolderName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Translate Model
 * doc
 * @param data The data for the request.
 * @param data.file
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.discretization
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const translateModel = (data: TranslateModelData): CancelablePromise<TranslateModelResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/translate/model',
    query: {
        file: data.file,
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        discretization: data.discretization
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Translate Gcode
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.discretization
 * @param data.dt
 * @param data.scale
 * @param data.modelFolderName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const translateGcode = (data: TranslateGcodeData): CancelablePromise<TranslateGcodeResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/translate/gcode',
    query: {
        model_name: data.modelName,
        discretization: data.discretization,
        dt: data.dt,
        scale: data.scale,
        model_folder_name: data.modelFolderName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Run Model
 * doc
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.modelName
 * @param data.modelFolderName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const runModel = (data: RunModelData): CancelablePromise<RunModelResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/jobs/run',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Cancel Job
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.cluster
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const cancelJob = (data: CancelJobData = {}): CancelablePromise<CancelJobResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/jobs/cancel',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        cluster: data.cluster
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Jobs
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getJobs = (data: GetJobsData = {}): CancelablePromise<GetJobsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/jobs/getJobs',
    query: {
        model_name: data.modelName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Status
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.ownMesh
 * @param data.cluster
 * @param data.sbatch
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getStatus = (data: GetStatusData = {}): CancelablePromise<GetStatusResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/jobs/getStatus',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        own_mesh: data.ownMesh,
        cluster: data.cluster,
        sbatch: data.sbatch
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Fracture Analysis
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.length
 * @param data.height
 * @param data.crackLength
 * @param data.youngModulus
 * @param data.poissionsRatio
 * @param data.yieldStress
 * @param data.cluster
 * @param data.tasks
 * @param data.output
 * @param data.step
 * @returns binary The image.
 * @throws ApiError
 */
export const getFractureAnalysis = (data: GetFractureAnalysisData = {}): CancelablePromise<GetFractureAnalysisResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/results/getFractureAnalysis',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        length: data.length,
        height: data.height,
        crack_length: data.crackLength,
        young_modulus: data.youngModulus,
        poissions_ratio: data.poissionsRatio,
        yield_stress: data.yieldStress,
        cluster: data.cluster,
        tasks: data.tasks,
        output: data.output,
        step: data.step
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Enf Analysis
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.length
 * @param data.width
 * @param data.crackLength
 * @param data.cluster
 * @param data.tasks
 * @param data.output
 * @param data.step
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getEnfAnalysis = (data: GetEnfAnalysisData = {}): CancelablePromise<GetEnfAnalysisResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/results/getEnfAnalysis',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        length: data.length,
        width: data.width,
        crack_length: data.crackLength,
        cluster: data.cluster,
        tasks: data.tasks,
        output: data.output,
        step: data.step
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Plot
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.cluster
 * @param data.output
 * @param data.tasks
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getPlot = (data: GetPlotData = {}): CancelablePromise<GetPlotResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/results/getPlot',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        cluster: data.cluster,
        output: data.output,
        tasks: data.tasks
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Results
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.output
 * @param data.tasks
 * @param data.cluster
 * @param data.allData
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getResults = (data: GetResultsData = {}): CancelablePromise<GetResultsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/results/getResults',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        output: data.output,
        tasks: data.tasks,
        cluster: data.cluster,
        all_data: data.allData
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Data
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.output
 * @param data.tasks
 * @param data.cluster
 * @param data.axis
 * @param data.step
 * @param data.displFactor
 * @param data.variable
 * @param data.filter
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getPointDataResults = (data: GetPointDataResultsData = {}): CancelablePromise<GetPointDataResultsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/results/getPointDataResults',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        output: data.output,
        tasks: data.tasks,
        cluster: data.cluster,
        axis: data.axis,
        step: data.step,
        displ_factor: data.displFactor,
        variable: data.variable,
        filter: data.filter
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Model
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteModel = (data: DeleteModelData = {}): CancelablePromise<DeleteModelResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/delete/model',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Model From Cluster
 * doc
 * @param data The data for the request.
 * @param data.modelName
 * @param data.modelFolderName
 * @param data.cluster
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteModelFromCluster = (data: DeleteModelFromClusterData = {}): CancelablePromise<DeleteModelFromClusterResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/delete/modelFromCluster',
    query: {
        model_name: data.modelName,
        model_folder_name: data.modelFolderName,
        cluster: data.cluster
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete User Data
 * doc
 * @param data The data for the request.
 * @param data.checkDate
 * @param data.days
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteUserData = (data: DeleteUserDataData): CancelablePromise<DeleteUserDataResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/delete/userData',
    query: {
        check_date: data.checkDate,
        days: data.days
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete User Data From Cluster
 * doc
 * @param data The data for the request.
 * @param data.cluster
 * @param data.checkDate
 * @param data.days
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteUserDataFromCluster = (data: DeleteUserDataFromClusterData): CancelablePromise<DeleteUserDataFromClusterResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/delete/userDataFromCluster',
    query: {
        cluster: data.cluster,
        check_date: data.checkDate,
        days: data.days
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Publications
 * doc
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getPublications = (): CancelablePromise<GetPublicationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/docs/getPublications'
}); };

/**
 * Energy
 * doc
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getPrognosisEnergy = (): CancelablePromise<GetPrognosisEnergyResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/energy/prognosis'
}); };

/**
 * Energy
 * doc
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getCurrentEnergy = (): CancelablePromise<GetCurrentEnergyResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/energy/current'
}); };