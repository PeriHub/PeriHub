// This file is auto-generated by @hey-api/openapi-ts

export type Adapt = {
    stableStepDifference?: number;
    maximumBondDifference?: number;
    stableBondDifference?: number;
};

export type Additive = {
    enabled: boolean;
    additiveModels: Array<AdditiveModel> | null;
};

export type AdditiveModel = {
    id?: number | null;
    name: string;
    additiveType: string;
    printTemp: number;
    timeFactor: number;
};

export type Block = {
    id?: number | null;
    name: string;
    material: string;
    damageModel?: string | null;
    additiveModel?: string | null;
    horizon?: number | null;
    density?: number | null;
    show?: boolean | null;
};

export type Body_upload_files = {
    files: Array<((Blob | File))>;
};

export type BondFilters = {
    id?: number | null;
    name: string;
    type: string;
    allow_contact?: boolean | null;
    normalX: number;
    normalY: number;
    normalZ: number;
    lowerLeftCornerX?: number | null;
    lowerLeftCornerY?: number | null;
    lowerLeftCornerZ?: number | null;
    bottomUnitVectorX?: number | null;
    bottomUnitVectorY?: number | null;
    bottomUnitVectorZ?: number | null;
    bottomLength?: number | null;
    sideLength?: number | null;
    centerX?: number | null;
    centerY?: number | null;
    centerZ?: number | null;
    radius?: number | null;
    show?: boolean | null;
};

export type BoundaryCondition = {
    conditionsId?: number | null;
    name: string;
    nodeSet?: number | null;
    boundarytype: string;
    variable: string;
    blockId?: number | null;
    coordinate: string;
    value: string;
};

export type BoundaryConditions = {
    conditions: Array<BoundaryCondition>;
    nodeSets?: Array<NodeSet> | null;
};

export type Compute = {
    id?: number | null;
    computeClass: string;
    name: string;
    variable: string;
    calculationType?: string | null;
    blockName?: string | null;
    xValue?: number | null;
    yValue?: number | null;
    zValue?: number | null;
};

export type Contact = {
    enabled: boolean;
    searchRadius: number;
    searchFrequency: number;
    contactModels: Array<ContactModel> | null;
    interactions: Array<Interaction> | null;
};

export type ContactModel = {
    id?: number | null;
    name: string;
    contactType: string;
    contactRadius: number;
    springConstant: number;
};

export type CriticalEnergyCalc = {
    calculateCriticalEnergy?: boolean | null;
    k1c?: number | null;
};

export type Damage = {
    id?: number | null;
    name: string;
    damageModel: string;
    criticalStretch?: number | null;
    criticalVonMisesStress?: number | null;
    criticalDamage?: number | null;
    thresholdDamage?: number | null;
    criticalDamageToNeglect?: number | null;
    criticalEnergy?: number | null;
    criticalEnergyCalc?: CriticalEnergyCalc | null;
    interBlockDamage?: boolean | null;
    numberOfBlocks?: number | null;
    interBlocks?: Array<InterBlock> | null;
    anistropicDamage?: boolean | null;
    anistropicDamageX?: number | null;
    anistropicDamageY?: number | null;
    anistropicDamageZ?: number | null;
    planeStress: boolean;
    onlyTension: boolean;
    detachedNodesCheck: boolean;
    thickness: number;
    hourglassCoefficient: number;
    stabilizationType: string;
};

export type EngineeringConstants = {
    E1?: number | null;
    E2?: number | null;
    E3?: number | null;
    G12?: number | null;
    G13?: number | null;
    G23?: number | null;
    nu12?: number | null;
    nu13?: number | null;
    nu23?: number | null;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type InterBlock = {
    id?: number | null;
    firstBlockId: number;
    secondBlockId: number;
    value: number;
};

export type Interaction = {
    id?: number | null;
    firstBlockId: number;
    secondBlockId: number;
    contactModelId: number;
};

export type Job = {
    cluster: boolean;
    nodes?: number | null;
    tasks?: number | null;
    tasksPerNode?: number | null;
    cpusPerTask?: number | null;
    multithread?: boolean | null;
    time?: string | null;
    account?: number | null;
};

export type Material = {
    id?: number | null;
    name: string;
    matType: Array<(string)>;
    bulkModulus?: number | null;
    shearModulus?: number | null;
    youngsModulus?: number | null;
    poissonsRatio?: number | null;
    planeStress: boolean;
    planeStrain: boolean;
    materialSymmetry: string;
    stabilizationType: string;
    thickness: number;
    hourglassCoefficient: number;
    actualHorizon?: number | null;
    yieldStress?: number | null;
    stiffnessMatrix?: StiffnessMatrix | null;
    properties: Array<properties> | null;
    numStateVars?: number | null;
    computePartialStress?: boolean | null;
    useCollocationNodes?: boolean | null;
};

export type Matrix = {
    C11?: number | null;
    C12?: number | null;
    C13?: number | null;
    C14?: number | null;
    C15?: number | null;
    C16?: number | null;
    C22?: number | null;
    C23?: number | null;
    C24?: number | null;
    C25?: number | null;
    C26?: number | null;
    C33?: number | null;
    C34?: number | null;
    C35?: number | null;
    C36?: number | null;
    C44?: number | null;
    C45?: number | null;
    C46?: number | null;
    C55?: number | null;
    C56?: number | null;
    C66?: number | null;
};

export type Model = {
    modelNameSelected: string;
    modelFolderName?: string | null;
    ownModel: boolean;
    ownMesh?: boolean | null;
    translated: boolean;
    length: number;
    cracklength?: number | null;
    notchEnabled?: boolean | null;
    width?: number | null;
    height?: number | null;
    height2?: number | null;
    radius?: number | null;
    radius2?: number | null;
    structured?: boolean | null;
    discretization: number;
    horizon?: number | null;
    twoDimensional: boolean;
    rotatedAngles: boolean;
    angles: Array<(number)>;
    amplitudeFactor?: number | null;
    wavelength?: number | null;
    mesh_file?: string | null;
};

export type ModelData = {
    model: Model;
    materials: Array<Material>;
    additive?: Additive | null;
    damages?: Array<Damage> | null;
    blocks: Array<Block>;
    contact?: Contact | null;
    boundaryConditions: BoundaryConditions;
    bondFilters?: Array<BondFilters> | null;
    computes?: Array<Compute> | null;
    preCalculations?: PreCalculations | null;
    outputs: Array<Output>;
    solver: Solver;
    job: Job;
};

export type NodeSet = {
    nodeSetId?: number | null;
    file: string;
};

export type Output = {
    outputsId?: number | null;
    name: string;
    selectedFileType?: string | null;
    selectedOutputs?: Array<(string)> | null;
    Write_After_Damage?: boolean | null;
    Frequency?: number | null;
    numberOfOutputSteps?: number | null;
    useOutputFrequency?: boolean | null;
    InitStep: number;
};

export type PreCalculations = {
    deformedBondGeometry?: boolean | null;
    deformationGradient?: boolean | null;
    shapeTensor?: boolean | null;
    bondAssociatedShapeTensor?: boolean | null;
    bondAssociateDeformationGradient?: boolean | null;
};

export type Solver = {
    matEnabled?: boolean;
    damEnabled?: boolean;
    dispEnabled?: boolean;
    tempEnabled?: boolean;
    verbose: boolean;
    initialTime: number;
    finalTime: number;
    fixedDt?: number | null;
    solvertype: string;
    safetyFactor: number;
    numericalDamping: number;
    verlet?: Verlet | null;
    stopAfterDamageInitation?: boolean | null;
    endStepAfterDamage?: number | null;
    stopAfterCertainDamage?: boolean | null;
    maxDamageValue?: number | null;
    stopBeforeDamageInitation?: boolean | null;
    adaptivetimeStepping?: boolean | null;
    adapt?: Adapt | null;
    calculateCauchy?: boolean | null;
    calculateVonMises?: boolean | null;
};

export type StiffnessMatrix = {
    calculateStiffnessMatrix?: boolean | null;
    engineeringConstants: EngineeringConstants;
    matrix: Matrix;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type Verlet = {
    safetyFactor?: number;
    numericalDamping?: number;
    outputFrequency?: number;
};

export type properties = {
    id?: number | null;
    name: string;
    value?: number | null;
};

export type GenerateModelData = {
    modelFolderName?: string;
    modelName?: string;
    requestBody: ModelData;
};

export type GenerateModelResponse = unknown;

export type GenerateMeshData = {
    modelFolderName?: string;
    modelName: string;
    param: string;
};

export type GenerateMeshResponse = unknown;

export type GetConfigData = {
    modelName?: string;
};

export type GetConfigResponse = unknown;

export type GetMaxFeSizeResponse = unknown;

export type GetModelData = {
    modelFolderName?: string;
    modelName?: string;
};

export type GetModelResponse = unknown;

export type GetPointDataData = {
    meshFile?: string;
    modelFolderName?: string;
    modelName?: string;
    ownMesh?: boolean;
    ownModel?: boolean;
    twoD?: boolean;
};

export type GetPointDataResponse = unknown;

export type ViewInputFileData = {
    modelFolderName?: string;
    modelName?: string;
};

export type ViewInputFileResponse = unknown;

export type UploadFilesData = {
    formData: Body_upload_files;
    modelFolderName?: string;
    modelName: string;
};

export type UploadFilesResponse = unknown;

export type WriteInputFileData = {
    inputString: string;
    modelFolderName?: string;
    modelName: string;
};

export type WriteInputFileResponse = unknown;

export type TranslateModelData = {
    discretization?: number;
    file: string;
    modelFolderName?: string;
    modelName: string;
};

export type TranslateModelResponse = unknown;

export type TranslateGcodeData = {
    discretization: number;
    dt: number;
    modelFolderName?: string;
    modelName: string;
    scale: number;
};

export type TranslateGcodeResponse = unknown;

export type RunModelData = {
    modelFolderName?: string;
    modelName?: string;
    requestBody: ModelData;
};

export type RunModelResponse = unknown;

export type CancelJobData = {
    cluster?: boolean;
    modelFolderName?: string;
    modelName?: string;
};

export type CancelJobResponse = unknown;

export type GetJobsData = {
    modelName?: string;
};

export type GetJobsResponse = unknown;

export type GetStatusData = {
    cluster?: boolean;
    modelFolderName?: string;
    modelName?: string;
    ownMesh?: boolean;
};

export type GetStatusResponse = unknown;

export type GetFractureAnalysisData = {
    cluster?: boolean;
    crackLength?: number;
    height?: number;
    length?: number;
    modelFolderName?: string;
    modelName?: string;
    output?: string;
    poissionsRatio?: number;
    step?: number;
    tasks?: number;
    yieldStress?: number;
    youngModulus?: number;
};

export type GetFractureAnalysisResponse = unknown;

export type GetEnfAnalysisData = {
    cluster?: boolean;
    crackLength?: number;
    length?: number;
    modelFolderName?: string;
    modelName?: string;
    output?: string;
    step?: number;
    tasks?: number;
    width?: number;
};

export type GetEnfAnalysisResponse = unknown;

export type GetPlotData = {
    cluster?: boolean;
    modelFolderName?: string;
    modelName?: string;
    output?: string;
    tasks?: number;
};

export type GetPlotResponse = unknown;

export type GetResultsData = {
    allData?: boolean;
    cluster?: boolean;
    modelFolderName?: string;
    modelName?: string;
    output?: string;
    tasks?: number;
};

export type GetResultsResponse = unknown;

export type GetPointDataResultsData = {
    axis?: string;
    cluster?: boolean;
    displFactor?: number;
    filter?: string;
    modelFolderName?: string;
    modelName?: string;
    output?: string;
    step?: number;
    tasks?: number;
    variable?: string;
};

export type GetPointDataResultsResponse = unknown;

export type DeleteModelData = {
    modelFolderName?: string;
    modelName?: string;
};

export type DeleteModelResponse = unknown;

export type DeleteModelFromClusterData = {
    cluster?: boolean;
    modelFolderName?: string;
    modelName?: string;
};

export type DeleteModelFromClusterResponse = unknown;

export type DeleteUserDataData = {
    checkDate: boolean;
    days?: number | null;
};

export type DeleteUserDataResponse = unknown;

export type DeleteUserDataFromClusterData = {
    checkDate: boolean;
    cluster: boolean;
    days?: number | null;
};

export type DeleteUserDataFromClusterResponse = unknown;

export type GetPublicationsResponse = unknown;

export type GetPrognosisEnergyResponse = unknown;

export type GetCurrentEnergyResponse = unknown;

export type $OpenApiTs = {
    '/generate/model': {
        post: {
            req: GenerateModelData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/generate/mesh': {
        get: {
            req: GenerateMeshData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/modelgetConfig': {
        get: {
            req: GetConfigData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/model/getMaxFeSize': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/model/getModel': {
        get: {
            req: GetModelData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/model/getPointData': {
        get: {
            req: GetPointDataData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/model/viewInputFile': {
        get: {
            req: ViewInputFileData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/upload/files': {
        post: {
            req: UploadFilesData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/upload/inputFile': {
        put: {
            req: WriteInputFileData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/translate/model': {
        post: {
            req: TranslateModelData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/translate/gcode': {
        post: {
            req: TranslateGcodeData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/jobs/run': {
        put: {
            req: RunModelData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/jobs/cancel': {
        put: {
            req: CancelJobData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/jobs/getJobs': {
        get: {
            req: GetJobsData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/jobs/getStatus': {
        get: {
            req: GetStatusData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/results/getFractureAnalysis': {
        get: {
            req: GetFractureAnalysisData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/results/getEnfAnalysis': {
        get: {
            req: GetEnfAnalysisData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/results/getPlot': {
        get: {
            req: GetPlotData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/results/getResults': {
        get: {
            req: GetResultsData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/results/getPointDataResults': {
        get: {
            req: GetPointDataResultsData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/delete/model': {
        delete: {
            req: DeleteModelData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/delete/modelFromCluster': {
        delete: {
            req: DeleteModelFromClusterData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/delete/userData': {
        delete: {
            req: DeleteUserDataData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/delete/userDataFromCluster': {
        delete: {
            req: DeleteUserDataFromClusterData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/docs/getPublications': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/energy/prognosis': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/energy/current': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
};