// This file is auto-generated by @hey-api/openapi-ts

export const $Adapt = {
    properties: {
        stableStepDifference: {
            type: 'integer',
            title: 'Stablestepdifference',
            default: 4
        },
        maximumBondDifference: {
            type: 'integer',
            title: 'Maximumbonddifference',
            default: 10
        },
        stableBondDifference: {
            type: 'integer',
            title: 'Stablebonddifference',
            default: 4
        }
    },
    type: 'object',
    title: 'Adapt'
} as const;

export const $Additive = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled'
        },
        additiveModels: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/AdditiveModel'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Additivemodels'
        }
    },
    type: 'object',
    required: ['enabled'],
    title: 'Additive'
} as const;

export const $AdditiveModel = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        additiveType: {
            type: 'string',
            title: 'Additivetype'
        },
        printTemp: {
            type: 'number',
            title: 'Printtemp'
        },
        timeFactor: {
            type: 'number',
            title: 'Timefactor'
        }
    },
    type: 'object',
    required: ['name', 'additiveType', 'printTemp', 'timeFactor'],
    title: 'AdditiveModel'
} as const;

export const $Block = {
    properties: {
        blocksId: {
            type: 'integer',
            title: 'Blocksid'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        material: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Material'
        },
        damageModel: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Damagemodel'
        },
        thermalModel: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thermalmodel'
        },
        additiveModel: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Additivemodel'
        },
        horizon: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Horizon'
        },
        density: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Density'
        },
        specificHeatCapacity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Specificheatcapacity'
        },
        show: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Show'
        }
    },
    type: 'object',
    required: ['blocksId', 'name'],
    title: 'Block'
} as const;

export const $BlockFunction = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        function: {
            type: 'string',
            title: 'Function'
        }
    },
    type: 'object',
    required: ['id', 'function'],
    title: 'BlockFunction'
} as const;

export const $Body_generate_model = {
    properties: {
        model_data: {
            '$ref': '#/components/schemas/ModelData'
        },
        valves: {
            '$ref': '#/components/schemas/Valves'
        }
    },
    type: 'object',
    required: ['model_data', 'valves'],
    title: 'Body_generate_model'
} as const;

export const $Body_upload_files = {
    properties: {
        files: {
            items: {
                type: 'string',
                format: 'binary'
            },
            type: 'array',
            title: 'Files'
        }
    },
    type: 'object',
    required: ['files'],
    title: 'Body_upload_files'
} as const;

export const $BondFilters = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        allow_contact: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Allow Contact',
            default: false
        },
        normalX: {
            type: 'number',
            title: 'Normalx'
        },
        normalY: {
            type: 'number',
            title: 'Normaly'
        },
        normalZ: {
            type: 'number',
            title: 'Normalz'
        },
        lowerLeftCornerX: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lowerleftcornerx'
        },
        lowerLeftCornerY: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lowerleftcornery'
        },
        lowerLeftCornerZ: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lowerleftcornerz'
        },
        bottomUnitVectorX: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bottomunitvectorx'
        },
        bottomUnitVectorY: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bottomunitvectory'
        },
        bottomUnitVectorZ: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bottomunitvectorz'
        },
        bottomLength: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bottomlength'
        },
        sideLength: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sidelength'
        },
        centerX: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Centerx'
        },
        centerY: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Centery'
        },
        centerZ: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Centerz'
        },
        radius: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Radius'
        },
        show: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Show'
        }
    },
    type: 'object',
    required: ['name', 'type', 'normalX', 'normalY', 'normalZ'],
    title: 'BondFilters'
} as const;

export const $BoundaryCondition = {
    properties: {
        conditionsId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Conditionsid'
        },
        stepId: {
            anyOf: [
                {
                    items: {
                        type: 'integer'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stepid',
            default: [1]
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        nodeSet: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nodeset'
        },
        boundarytype: {
            type: 'string',
            title: 'Boundarytype'
        },
        variable: {
            type: 'string',
            title: 'Variable'
        },
        blockId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Blockid'
        },
        coordinate: {
            type: 'string',
            title: 'Coordinate'
        },
        value: {
            type: 'string',
            title: 'Value'
        }
    },
    type: 'object',
    required: ['name', 'boundarytype', 'variable', 'coordinate', 'value'],
    title: 'BoundaryCondition'
} as const;

export const $BoundaryConditions = {
    properties: {
        conditions: {
            items: {
                '$ref': '#/components/schemas/BoundaryCondition'
            },
            type: 'array',
            title: 'Conditions'
        }
    },
    type: 'object',
    required: ['conditions'],
    title: 'BoundaryConditions'
} as const;

export const $Compute = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        computeClass: {
            type: 'string',
            title: 'Computeclass'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        variable: {
            type: 'string',
            title: 'Variable'
        },
        calculationType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Calculationtype'
        },
        blockName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Blockname'
        },
        xValue: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Xvalue'
        },
        yValue: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Yvalue'
        },
        zValue: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Zvalue'
        }
    },
    type: 'object',
    required: ['computeClass', 'name', 'variable'],
    title: 'Compute'
} as const;

export const $Contact = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled'
        },
        contactGroups: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/contactGroup'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contactgroups'
        }
    },
    type: 'object',
    required: ['enabled'],
    title: 'Contact'
} as const;

export const $CriticalEnergyCalc = {
    properties: {
        calculateCriticalEnergy: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Calculatecriticalenergy'
        },
        k1c: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'K1C'
        }
    },
    type: 'object',
    title: 'CriticalEnergyCalc'
} as const;

export const $Damage = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        damageModel: {
            type: 'string',
            title: 'Damagemodel'
        },
        criticalStretch: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Criticalstretch'
        },
        criticalVonMisesStress: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Criticalvonmisesstress'
        },
        criticalDamage: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Criticaldamage'
        },
        thresholdDamage: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thresholddamage'
        },
        criticalDamageToNeglect: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Criticaldamagetoneglect'
        },
        criticalEnergy: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Criticalenergy'
        },
        criticalEnergyCalc: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CriticalEnergyCalc'
                },
                {
                    type: 'null'
                }
            ]
        },
        interBlockDamage: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Interblockdamage'
        },
        numberOfBlocks: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Numberofblocks'
        },
        interBlocks: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/InterBlock'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Interblocks'
        },
        anistropicDamage: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Anistropicdamage'
        },
        anistropicDamageX: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Anistropicdamagex'
        },
        anistropicDamageY: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Anistropicdamagey'
        },
        anistropicDamageZ: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Anistropicdamagez'
        },
        planeStress: {
            type: 'boolean',
            title: 'Planestress'
        },
        onlyTension: {
            type: 'boolean',
            title: 'Onlytension'
        },
        detachedNodesCheck: {
            type: 'boolean',
            title: 'Detachednodescheck'
        },
        thickness: {
            type: 'number',
            title: 'Thickness'
        },
        hourglassCoefficient: {
            type: 'number',
            title: 'Hourglasscoefficient'
        },
        stabilizationType: {
            type: 'string',
            title: 'Stabilizationtype'
        }
    },
    type: 'object',
    required: ['name', 'damageModel', 'planeStress', 'onlyTension', 'detachedNodesCheck', 'thickness', 'hourglassCoefficient', 'stabilizationType'],
    title: 'Damage'
} as const;

export const $Discretization = {
    properties: {
        distributionType: {
            type: 'string',
            title: 'Distributiontype'
        },
        discType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Disctype',
            default: 'txt'
        },
        gcode: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Gcode'
                },
                {
                    type: 'null'
                }
            ]
        },
        nodeSets: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/NodeSet'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nodesets'
        }
    },
    type: 'object',
    required: ['distributionType'],
    title: 'Discretization'
} as const;

export const $EngineeringConstants = {
    properties: {
        E1: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'E1'
        },
        E2: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'E2'
        },
        E3: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'E3'
        },
        G12: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'G12'
        },
        G13: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'G13'
        },
        G23: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'G23'
        },
        nu12: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nu12'
        },
        nu13: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nu13'
        },
        nu23: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nu23'
        }
    },
    type: 'object',
    title: 'EngineeringConstants'
} as const;

export const $Gcode = {
    properties: {
        overwriteMesh: {
            type: 'boolean',
            title: 'Overwritemesh'
        },
        dx: {
            type: 'number',
            title: 'Dx'
        },
        dy: {
            type: 'number',
            title: 'Dy'
        },
        width: {
            type: 'number',
            title: 'Width'
        },
        scale: {
            type: 'number',
            title: 'Scale'
        },
        blockFunctions: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/BlockFunction'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Blockfunctions'
        }
    },
    type: 'object',
    required: ['overwriteMesh', 'dx', 'dy', 'width', 'scale'],
    title: 'Gcode'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $InterBlock = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        firstBlockId: {
            type: 'integer',
            title: 'Firstblockid'
        },
        secondBlockId: {
            type: 'integer',
            title: 'Secondblockid'
        },
        value: {
            type: 'number',
            title: 'Value'
        }
    },
    type: 'object',
    required: ['firstBlockId', 'secondBlockId', 'value'],
    title: 'InterBlock'
} as const;

export const $Job = {
    properties: {
        cluster: {
            type: 'boolean',
            title: 'Cluster'
        },
        sbatch: {
            type: 'boolean',
            title: 'Sbatch'
        },
        verbose: {
            type: 'boolean',
            title: 'Verbose'
        },
        nodes: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nodes',
            default: 1
        },
        tasks: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tasks',
            default: 32
        },
        tasksPerNode: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Taskspernode',
            default: 32
        },
        cpusPerTask: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cpuspertask',
            default: 1
        },
        multithread: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Multithread',
            default: false
        },
        time: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Time'
        },
        account: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Account'
        }
    },
    type: 'object',
    required: ['cluster', 'sbatch', 'verbose'],
    title: 'Job'
} as const;

export const $Material = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        matType: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Mattype'
        },
        bulkModulus: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bulkmodulus'
        },
        shearModulus: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Shearmodulus'
        },
        youngsModulus: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Youngsmodulus'
        },
        poissonsRatio: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Poissonsratio'
        },
        planeStress: {
            type: 'boolean',
            title: 'Planestress'
        },
        planeStrain: {
            type: 'boolean',
            title: 'Planestrain'
        },
        materialSymmetry: {
            type: 'string',
            title: 'Materialsymmetry'
        },
        stabilizationType: {
            type: 'string',
            title: 'Stabilizationtype'
        },
        thickness: {
            type: 'number',
            title: 'Thickness'
        },
        hourglassCoefficient: {
            type: 'number',
            title: 'Hourglasscoefficient'
        },
        actualHorizon: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actualhorizon'
        },
        yieldStress: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Yieldstress'
        },
        stiffnessMatrix: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StiffnessMatrix'
                },
                {
                    type: 'null'
                }
            ]
        },
        properties: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/properties'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Properties'
        },
        numStateVars: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Numstatevars'
        },
        computePartialStress: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Computepartialstress'
        },
        useCollocationNodes: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Usecollocationnodes'
        }
    },
    type: 'object',
    required: ['name', 'matType', 'planeStress', 'planeStrain', 'materialSymmetry', 'stabilizationType', 'thickness', 'hourglassCoefficient', 'properties'],
    title: 'Material'
} as const;

export const $Matrix = {
    properties: {
        C11: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C11'
        },
        C12: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C12'
        },
        C13: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C13'
        },
        C14: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C14'
        },
        C15: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C15'
        },
        C16: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C16'
        },
        C22: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C22'
        },
        C23: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C23'
        },
        C24: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C24'
        },
        C25: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C25'
        },
        C26: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C26'
        },
        C33: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C33'
        },
        C34: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C34'
        },
        C35: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C35'
        },
        C36: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C36'
        },
        C44: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C44'
        },
        C45: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C45'
        },
        C46: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C46'
        },
        C55: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C55'
        },
        C56: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C56'
        },
        C66: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'C66'
        }
    },
    type: 'object',
    title: 'Matrix'
} as const;

export const $Model = {
    properties: {
        modelFolderName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Modelfoldername',
            default: 'Default'
        },
        ownModel: {
            type: 'boolean',
            title: 'Ownmodel'
        },
        twoDimensional: {
            type: 'boolean',
            title: 'Twodimensional'
        },
        ownMesh: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ownmesh'
        },
        horizon: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Horizon'
        },
        meshFile: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Meshfile'
        }
    },
    type: 'object',
    required: ['ownModel', 'twoDimensional'],
    title: 'Model'
} as const;

export const $ModelData = {
    properties: {
        additive: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Additive'
                },
                {
                    type: 'null'
                }
            ]
        },
        blocks: {
            items: {
                '$ref': '#/components/schemas/Block'
            },
            type: 'array',
            title: 'Blocks'
        },
        bondFilters: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/BondFilters'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bondfilters'
        },
        boundaryConditions: {
            '$ref': '#/components/schemas/BoundaryConditions'
        },
        computes: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/Compute'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Computes'
        },
        contact: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Contact'
                },
                {
                    type: 'null'
                }
            ]
        },
        damages: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/Damage'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Damages'
        },
        discretization: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Discretization'
                },
                {
                    type: 'null'
                }
            ]
        },
        job: {
            '$ref': '#/components/schemas/Job'
        },
        materials: {
            items: {
                '$ref': '#/components/schemas/Material'
            },
            type: 'array',
            title: 'Materials'
        },
        model: {
            '$ref': '#/components/schemas/Model'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/Output'
            },
            type: 'array',
            title: 'Outputs'
        },
        preCalculations: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PreCalculations'
                },
                {
                    type: 'null'
                }
            ]
        },
        solvers: {
            items: {
                '$ref': '#/components/schemas/Solver'
            },
            type: 'array',
            title: 'Solvers'
        },
        thermal: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Thermal'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['blocks', 'boundaryConditions', 'job', 'materials', 'model', 'outputs', 'solvers'],
    title: 'ModelData',
    example: {
        blocks: [
            {
                damageModel: '',
                density: '1.4e5',
                id: 1,
                material: 'PMMAElast',
                name: 'block_1',
                show: true
            },
            {
                damageModel: '',
                density: '1.4e5',
                id: 2,
                material: 'PMMAElast',
                name: 'block_2',
                show: true
            },
            {
                damageModel: '',
                density: '1.4e5',
                id: 3,
                material: 'PMMA',
                name: 'block_3',
                show: true
            },
            {
                damageModel: '',
                density: '1.4e5',
                id: 4,
                material: 'PMMAElast',
                name: 'block_4',
                show: true
            },
            {
                damageModel: '',
                density: '1.4e5',
                id: 5,
                material: 'PMMAElast',
                name: 'block_5',
                show: true
            }
        ],
        boundaryConditions: {
            conditions: [
                {
                    blockId: 1,
                    boundarytype: 'Dirichlet',
                    conditionsId: 1,
                    coordinate: 'x',
                    name: 'BC_1',
                    nodeSet: 1,
                    value: '0*t',
                    variable: 'Displacements'
                },
                {
                    blockId: 5,
                    boundarytype: 'Dirichlet',
                    conditionsId: 2,
                    coordinate: 'x',
                    name: 'BC_2',
                    nodeSet: 2,
                    value: '0.05*t',
                    variable: 'Displacements'
                }
            ],
            nodeSets: [
                {
                    file: 'ns_Dogbone_1.txt',
                    nodeSetId: 1
                },
                {
                    file: 'ns_Dogbone_2.txt',
                    nodeSetId: 2
                }
            ]
        },
        computes: [
            {
                blockName: 'block_5',
                calculationType: 'Maximum',
                computeClass: 'Block_Data',
                id: 1,
                name: 'External_Displacement',
                variable: 'Displacement'
            },
            {
                blockName: 'block_5',
                calculationType: 'Sum',
                computeClass: 'Block_Data',
                id: 2,
                name: 'External_Force',
                variable: 'Force'
            }
        ],
        damages: [
            {
                criticalEnergy: '10.1',
                criticalEnergyCalc: {
                    calculateCriticalEnergy: false
                },
                criticalStretch: 10,
                damageModel: 'Critical Energy Correspondence',
                detachedNodesCheck: true,
                hourglassCoefficient: 1,
                id: 1,
                interblockdamageEnergy: '0.01',
                name: 'PMMADamage',
                onlyTension: false,
                planeStress: true,
                stabilizationType: 'Global Stiffness',
                thickness: 10
            }
        ],
        job: {
            account: 2263032,
            cluster: false,
            cpusPerTask: 1,
            multithread: false,
            nodes: 1,
            tasks: 32,
            tasksPerNode: 32,
            time: '00:20:00'
        },
        materials: [
            {
                density: '1.4e5',
                hourglassCoefficient: 1,
                id: 1,
                matType: ['Correspondence Elastic'],
                materialSymmetry: 'Isotropic',
                name: 'PMMA',
                nonLinear: true,
                planeStress: true,
                poissonsRatio: 0.3,
                properties: [
                    {
                        id: 1,
                        name: 'Prop_1'
                    }
                ],
                stabilizationType: 'Global Stiffness',
                tensionSeparation: false,
                thickness: '0.01',
                youngsModulus: '2.997e9'
            },
            {
                density: '1.4e5',
                hourglassCoefficient: '1',
                id: 2,
                matType: ['Correspondence Elastic'],
                materialSymmetry: 'Isotropic',
                name: 'PMMAElast',
                nonLinear: true,
                planeStress: true,
                poissonsRatio: '0.3',
                properties: [
                    {
                        id: 1,
                        name: 'Prop_1'
                    }
                ],
                stabilizationType: 'Global Stiffness',
                tensionSeparation: false,
                thickness: '0.01',
                youngsModulus: '2.997e9'
            }
        ],
        model: {
            angles: [0, 0],
            discretization: 21,
            gcode: false,
            height: 2,
            height2: 1,
            horizon: 1,
            length: 13,
            modelFolderName: 'Default',
            ownModel: false,
            rotatedAngles: false,
            structured: true,
            twoDimensional: true,
            width: 0.1
        },
        outputs: [
            {
                Frequency: '100',
                InitStep: 0,
                id: 1,
                name: 'Output1',
                selectedOutputs: ['Displacement', 'Force', 'Damage', 'Velocity', 'Partial_Stress']
            }
        ],
        solvers: [
            {
                adapt: {
                    maximumBondDifference: 4,
                    stableBondDifference: 1,
                    stableStepDifference: 4
                },
                adaptivetimeStepping: false,
                filetype: 'yaml',
                finalTime: '0.0075',
                initialTime: 0,
                numericalDamping: '0.0005',
                safetyFactor: '0.9',
                solvertype: 'Verlet',
                stopAfterDamageInitation: false,
                stopBeforeDamageInitation: false,
                verbose: false,
                verlet: {
                    numericalDamping: 0.000005,
                    outputFrequency: 7500,
                    safetyFactor: 0.95
                }
            }
        ]
    }
} as const;

export const $NodeSet = {
    properties: {
        nodeSetId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nodesetid'
        },
        file: {
            type: 'string',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'NodeSet'
} as const;

export const $Output = {
    properties: {
        outputsId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Outputsid'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        selectedFileType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Selectedfiletype',
            default: 'Exodus'
        },
        selectedOutputs: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Selectedoutputs'
        },
        Write_After_Damage: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Write After Damage'
        },
        Frequency: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Frequency',
            default: 100
        },
        numberOfOutputSteps: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Numberofoutputsteps',
            default: 100
        },
        useOutputFrequency: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Useoutputfrequency',
            default: false
        },
        InitStep: {
            type: 'integer',
            title: 'Initstep'
        }
    },
    type: 'object',
    required: ['name', 'InitStep'],
    title: 'Output'
} as const;

export const $PreCalculations = {
    properties: {
        deformedBondGeometry: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deformedbondgeometry'
        },
        deformationGradient: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deformationgradient'
        },
        shapeTensor: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Shapetensor'
        },
        bondAssociatedShapeTensor: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bondassociatedshapetensor'
        },
        bondAssociateDeformationGradient: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Bondassociatedeformationgradient'
        }
    },
    type: 'object',
    title: 'PreCalculations'
} as const;

export const $Solver = {
    properties: {
        solverId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Solverid'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        stepId: {
            type: 'integer',
            title: 'Stepid',
            default: 1
        },
        matEnabled: {
            type: 'boolean',
            title: 'Matenabled',
            default: true
        },
        damEnabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Damenabled'
        },
        dispEnabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Dispenabled'
        },
        tempEnabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tempenabled'
        },
        addEnabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Addenabled'
        },
        initialTime: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Initialtime'
        },
        finalTime: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Finaltime'
        },
        additionalTime: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Additionaltime'
        },
        fixedDt: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Fixeddt'
        },
        solvertype: {
            type: 'string',
            title: 'Solvertype'
        },
        safetyFactor: {
            type: 'number',
            title: 'Safetyfactor'
        },
        verlet: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Verlet'
                },
                {
                    type: 'null'
                }
            ]
        },
        static: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Static'
                },
                {
                    type: 'null'
                }
            ]
        },
        stopAfterDamageInitation: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stopafterdamageinitation'
        },
        endStepAfterDamage: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Endstepafterdamage'
        },
        stopAfterCertainDamage: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stopaftercertaindamage'
        },
        maxDamageValue: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Maxdamagevalue'
        },
        stopBeforeDamageInitation: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stopbeforedamageinitation'
        },
        adaptivetimeStepping: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Adaptivetimestepping'
        },
        adapt: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Adapt'
                },
                {
                    type: 'null'
                }
            ]
        },
        calculateCauchy: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Calculatecauchy'
        },
        calculateVonMises: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Calculatevonmises'
        },
        calculateStrain: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Calculatestrain'
        }
    },
    type: 'object',
    required: ['solvertype', 'safetyFactor'],
    title: 'Solver'
} as const;

export const $Static = {
    properties: {
        numberOfSteps: {
            type: 'integer',
            title: 'Numberofsteps'
        },
        maximumNumberOfIterations: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Maximumnumberofiterations'
        },
        NLsolver: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nlsolver'
        },
        showSolverIteration: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Showsolveriteration'
        },
        residualTolerance: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Residualtolerance'
        },
        solutionTolerance: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Solutiontolerance'
        },
        linearStartValue: {
            anyOf: [
                {
                    items: {
                        type: 'number'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Linearstartvalue'
        },
        residualScaling: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Residualscaling'
        },
        m: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'M'
        }
    },
    type: 'object',
    required: ['numberOfSteps'],
    title: 'Static'
} as const;

export const $StiffnessMatrix = {
    properties: {
        calculateStiffnessMatrix: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Calculatestiffnessmatrix'
        },
        engineeringConstants: {
            '$ref': '#/components/schemas/EngineeringConstants'
        },
        matrix: {
            '$ref': '#/components/schemas/Matrix'
        }
    },
    type: 'object',
    required: ['engineeringConstants', 'matrix'],
    title: 'StiffnessMatrix'
} as const;

export const $Thermal = {
    properties: {
        enabled: {
            type: 'boolean',
            title: 'Enabled'
        },
        thermalModels: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ThermalModel'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thermalmodels'
        }
    },
    type: 'object',
    required: ['enabled'],
    title: 'Thermal'
} as const;

export const $ThermalModel = {
    properties: {
        thermalModelsId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thermalmodelsid'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        thermalModel: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Thermalmodel'
        },
        thermalType: {
            type: 'string',
            title: 'Thermaltype'
        },
        heatTransferCoefficient: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Heattransfercoefficient'
        },
        environmentalTemperature: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Environmentaltemperature'
        },
        requiredSpecificVolume: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Requiredspecificvolume'
        },
        thermalConductivity: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thermalconductivity'
        },
        thermalExpansionCoefficient: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thermalexpansioncoefficient'
        },
        thermalConductivityPrintBed: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Thermalconductivityprintbed'
        },
        printBedTemperature: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Printbedtemperature'
        },
        file: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'File'
        },
        numStateVars: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Numstatevars'
        },
        predefinedFieldNames: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Predefinedfieldnames'
        }
    },
    type: 'object',
    required: ['name', 'thermalModel', 'thermalType'],
    title: 'ThermalModel'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $Valve = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        label: {
            type: 'string',
            title: 'Label'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        value: {
            title: 'Value'
        },
        options: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Options'
        }
    },
    type: 'object',
    required: ['name', 'type', 'label', 'description', 'value', 'options'],
    title: 'Valve'
} as const;

export const $Valves = {
    properties: {
        valves: {
            items: {
                '$ref': '#/components/schemas/Valve'
            },
            type: 'array',
            title: 'Valves'
        }
    },
    type: 'object',
    required: ['valves'],
    title: 'Valves'
} as const;

export const $Verlet = {
    properties: {
        safetyFactor: {
            type: 'number',
            title: 'Safetyfactor',
            default: 0.95
        },
        numericalDamping: {
            type: 'number',
            title: 'Numericaldamping',
            default: 0.000005
        },
        outputFrequency: {
            type: 'integer',
            title: 'Outputfrequency',
            default: 1000
        }
    },
    type: 'object',
    title: 'Verlet'
} as const;

export const $contactGroup = {
    properties: {
        contactGroupId: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contactgroupid'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        masterBlockId: {
            type: 'integer',
            title: 'Masterblockid'
        },
        slaveBlockId: {
            type: 'integer',
            title: 'Slaveblockid'
        },
        searchRadius: {
            type: 'number',
            title: 'Searchradius'
        },
        contactModel: {
            '$ref': '#/components/schemas/contactModel'
        }
    },
    type: 'object',
    required: ['name', 'masterBlockId', 'slaveBlockId', 'searchRadius', 'contactModel'],
    title: 'contactGroup'
} as const;

export const $contactModel = {
    properties: {
        contactType: {
            type: 'string',
            title: 'Contacttype'
        },
        contactRadius: {
            type: 'number',
            title: 'Contactradius'
        },
        contactStiffness: {
            type: 'number',
            title: 'Contactstiffness'
        }
    },
    type: 'object',
    required: ['contactType', 'contactRadius', 'contactStiffness'],
    title: 'contactModel'
} as const;

export const $properties = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        value: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'properties'
} as const;